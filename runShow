--lua
args = {...}
if table.getn(args) < 1 then
	print("No show passed")
	return
end
showname = args[1]
if not fs.exists(showname) then
	print("Show does not exist")
	return
end

math.randomseed(os.time()*1000)
math.random(2)

standardColors = {
	black={30,27,27},
	red={179,49,44},
	green={59,81,26},
	brown={81,48,26},
	blue={37,49,146},
	purple={123,47,190},
	cyan={40,118,151},
	lightgray={171,171,171},
	gray={67,67,67},
	pink={216,129,152},
	lime={65,205,52},
	yellow={222,207,42},
	lightblue={102,137,211},
	magenta={195,84,205},
	orange={235,136,68},
	white={240,240,240}
}

vars = {}

function empty(item)
	return item == nil or item == "" or item == {}
end

function strsplit(inputstr, sep)
	if sep == nil then
		sep = "%s"
	end
	local t={} ; i=1
	for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
		t[i] = str
		i = i + 1
	end
	return t
end

function newStack()
	return {""}
end

function addString(stack, s)
	table.insert(stack, s)
	for i=table.getn(stack)-1, 1, -1 do
		if string.len(stack[i]) > string.len(stack[i+1]) then
			break
		end
		stack[i] = stack[i] .. table.remove(stack)
	end
end

function append(stack, item, default, prefix, postfix, prefixwithcomma)
	item = (item and item or default)
	if empty(item) then
		return false
	end
	if prefixwithcomma then
		addString(stack, ",")
	end
	if not empty(prefix) then
		addString(stack, prefix)
	end
	if type(item) == "table" then
		subItemPrev = false
		for i,subItem in ipairs(item) do
			subItemPrev = append(shellStr, subItem, "", "", "", subItemPrev)
		end
	else
		addString(stack, item)
	end
	if not empty(postfix) then
		addString(stack, postfix)
	end
	return true
end

function runSummon(string)
	commands.execAsync("summon FireworksRocketEntity "..string)
end

function translateColors(colors)
	if colors == nil then
		return nil
	elseif type(colors) == "table" then
		translated = {}
		for i,color in ipairs(colors) do
			table.insert(translated, translateColors(color))
		end
		return translated
	else
		if standardColors[colors] ~= nil then
			return tostring(65536 * standardColors[colors][1] + 256 * standardColors[colors][2] + standardColors[colors][3])
		elseif string.len(colors) <= 8 and tonumber(colors) ~= nil then
			return colors
		end
		print("Couldn't convert to color: "..colors)
		return "16777215"
	end
end

function launchFirewok(firework)
	if not type(firework) == "table" then
		print("Can't launch a "..type(firework))
		return
	end

	fireStr = newStack()
	append(fireStr, firework["x"], "~", "", " ")
	append(fireStr, firework["y"], "~", "", " ")
	append(fireStr, firework["z"], "~", "", " ")

	append(fireStr, "{")

	append(fireStr, firework["lifetime"], "20", "LifeTime:")

	append(fireStr, ",FireworksItem:{id:42,tag:{Fireworks:{Explosions:[")
	if firework["shells"] then
		shellsStack = {}
		for i,shell in ipairs(firework["shells"]) do
			shellStr = newStack()
			append(shellStr, "{")
			item = append(shellStr, shell["type"], "", "Type:")
			item = append(shellStr, shell["flicker"], "", "Flicker:", "", item)
			item = append(shellStr, shell["trail"], "", "Trail:", "", item)
			item = append(shellStr, translateColors(shell["colors"]), "", "Colors:[", "]", item)
			append(shellStr, translateColors(shell["fadecolors"]), "", "FadeColors:[", "]", item)
			append(shellStr, "}")
			table.insert(shellsStack, table.concat(shellStr))
		end
		append(fireStr, table.concat(shellsStack, ","))
	else
		append(fireStr, "{Colors:[16777215]}")
	end
	append(fireStr, "]}}}")

	append(fireStr, "}")

	print(table.concat(fireStr))
	runSummon(table.concat(fireStr))
end

function pickRand(val)
	if string.find(val, "|") then
		options = strsplit(val, "|")
		return options[math.random(table.getn(options))]
	else
		return nil
	end
end

function evalVar(val)
	val = pickRand(val) or val
	if vars[val] then
		return evalVar(vars[val])
	else
		return val
	end
end

showFile = fs.open(showname, "r")

fireworks = {}
while true do
	line = showFile.readLine()
	if line == nil then break end

	equals = string.find(line, "=")
	if equals then
		vars[string.sub(line, 1, equals-2)] = string.sub(line, equals+2, string.len(line))
	else
		firework = {}
		for i,word in ipairs(strsplit(line)) do
			element = strsplit(word, ":")
			firework[element[1]] = element[2]
		end
		table.insert(fireworks, firework)
	end
end

for i,firework in ipairs(fireworks) do
	for j in pairs(firework) do
		firework[j] = evalVar(firework[j])
		print(j," ",firework[j])
		if firework[j] == "_" then table.remove(firework, j) end
		print(j," ",firework[j])
	end
	print()
end
print(textutils.serialize(fireworks))

--shell1 = {colors={"red"}}
--firework = {lifetime="20",shells={shell1}}
--launchFirewok(firework)

showFile.close()